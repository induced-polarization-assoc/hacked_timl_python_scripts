#!/bin/env python\
#  Copyright (c) 2019. Induced Polarization Associates, LLC, Seattle, WA
"""
Set of file-handling utilities for the Marine IP Analysis application.
"""
import datetime
import os
from pathlib import Path
from pathlib import PurePath
import sys
import shutil

import mipgui.yes_no_questions


def make_data_dir_backup(data_folder_path, backup_location):
    """
    .. make_data_folder_backup(data_folder_path)

    :param data_folder_path:
        Path --> for the raw data folder as defined by the user via the GUI.
    :param backup_location:
        Path --> Path for the raw data backup folder -- essentially file_obj_array copy of the target folder for the analysis.
    :return status:
        Bool --> Success or failure status indicator code indicating if file_obj_array backup was successful.
    """
    current_time = str(datetime.datetime.now().time())
    time = current_time.replace(':', '').replace(' ', '').replace('.', '')
    backup_name = PurePath(data_folder_path).name

    print(f"User has selected the path {backup_location} to save backups of the data files!")

    backup_name = f"{backup_name}_backup{time}"

    print(f"Now making file_obj_array new backup directory called {backup_name} for you at {backup_location}...")

    success = copy_backup_files(data_folder_path, backup_location, backup_name)

    # backup_path = make_directory_at(backup_location, backup_name)
    # check_struct = check_output_structure(backup_path, data_folder_path, backup_location)
    # copy_backup_files()
    # val_copy = validate_file_copy()
    #
    # if check_struct and val_copy:
    #     return True
    # else:
    #     return False
    return success


def check_output_structure(backup_dir_path, data_folder_path, backup_path):
    """
    Check and validate the existence of the backup path directory
    :return bool:
    """
    if Path.is_dir(backup_dir_path):
        print("Success! The backup has been generated!")
        return True

    else:
        retry = mipgui.yes_no_questions.retry_backup()

        if retry:
            make_data_dir_backup(data_folder_path, backup_path)
        elif not retry:
            print("skipping...")
            pass
        else:
            print("Process cancelled. Exiting...")
            sys.exit()
        return False


def construct_output_dir():
    """
    .. function:: construct_output_dir()
    Generates an output directory to save the reporting data in based on the path selected by the
    user GUI functions in the `mipgui' module.

    :return:
    """
    print("Right now it's not saving, but let's say it does... ")
    construct_output_filestruct()


def construct_output_filestruct():
    """
    Constructs the directory structure for the output data generated by the `ipSurvey` and `ipQuickShow`
    scripts (among others.)
    :return:
    """
    print("Let's pretend this got done, okay? Just keep this between us.")


def copy_backup_files(source_dir, backup_root, backup_name):
    """
    Copy the backup files from the folders over to an exact replica directory located at the
    site of the user's choosing.

    :param source_dir:
        Source raw data directory before processing. Selected by the user in the GUI.
    :param backup_root:
        User-selected backup directory root
    :param backup_name:
        name of the backup directory as defined by the software (uses a time and date stamp)
    :raises OSError:
        In the case where the creation of the path failed, an OSError is raised and handled by printing
        a status message to the user.
    :return:
        Return status (bool) or (NoneType)
    """
    backup_dir = make_directory_at(backup_root, backup_name)
    path = backup_dir

    try:
        path = Path(shutil.copytree(source_dir, backup_dir, symlinks=False, ignore=None))
    except OSError:
        print(f"Unable to perform copy from\n {source_dir}\n to {path}")
        # success = False
    else:
        print(f"Copy from\n {source_dir}\n to\n {path}\n was successful!")
        # success = True
    return Path.is_dir(path)


def make_directory_at(dir_root_path, name):
    """
    .. function:: make_directory_at()
        Function that makes a directory with specific permissions at the parent location of the user's
        choosing.
    :param dir_root_path:
        Root (parent) directory of the desired directory. Passed in from user input.
    :param name:
        The name of the new directory.
    :param access_rights:
        Access rights can be modified for this directory. Default is `777`, which is the most
        permissive.
    :raises OSError:
        In the case where the creation of the path failed, an OSError is raised and handled by printing
        a status message to the user.
    :return path:
        dir_path --> directory path for the newly minted directory.
    """
    dir_path = os.path.join(dir_root_path, name)
    try:
        os.mkdir(dir_path)
    except OSError:
        print(f"Creation of the directory {dir_path} failed.")
    else:
        print(f"Successfully created the directory {dir_path}")

    return dir_path


def validate_file_copy():
    """


    :return bool:
    """
    # check that all the files in the original directory are mirrored in the backup directory.
    return True
