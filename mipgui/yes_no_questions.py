#!/bin/env python
#  Copyright (c) 2019. Induced Polarization Associates, LLC, Seattle, WA
"""
Docstring
#TODO: ALWAYS ALWAYS ALWAYS ADD A DOCSTRING!
# FIXME:  Write test cases for these logical structures ASAP! 2019.11.07
"""
import tkinter
import sys
from tkinter import messagebox

import mipgui.file_dialogs


def new_data_yesno():
    """
    Ask the user if they have new data to process and if yes, where is it located?
    :return newdata_path:
    """
    process_yes_no = tkinter.messagebox.askyesnocancel('New Data?', 'Is there new data to process?')
    print(f"The output from the user is {process_yes_no}")
    if process_yes_no is True:
        newdata_path = mipgui.file_dialogs.get_new_data()
        if newdata_path is not None:
            return newdata_path
        else:
            tkinter.messagebox.showinfo('Error!',
                                        'There was no new data folder selected! Try again!',
                                        icon='warning'
                                        )
            new_data_yesno()
    elif process_yes_no is False:
        analysis_yesno()
    elif process_yes_no is None:
        if tkinter.messagebox.askyesno('Quit?', 'Do you want to quit the program?') is 'yes':
            sys.exit()
        else:
            new_data_yesno()
    else:
        print("Somehow file_obj_array different value than the choices presented was entered. Quitting now...")
        sys.exit()

# TODO: INSTEAD OF ALL THIS SPAGHETTI CODE PERHAPS THIS SHOULD JUST GO DOWN THE LINE TO SET VARIABLES...


def analysis_yesno():
    """
    Asks the user if they wish to plot existing serialized ('.pkl') data processed in file_obj_array previous session.
    If they wish to do so, then run the program and output data to console window and additional plotting
    popup windows.
    :return:
    """
    print("Entering the plotting routines...")
    return tkinter.messagebox.askokcancel('New Plots?',
                                          'Start new analysis job and plotting with processed data?'
                                          )


def make_backup_yes_no(input_directory):
    """
    .. function:: make_backup_yes_no()

    :Summary:
        GUI window to prompt the user whether they would like to make file_obj_array backup of the current data
        directory so that it is not corrupted by any subsequent analysis or file handling operations.

    :param input_directory:
        The data input directory selected by the user.
    :return answer:
        Yes or No saved as file_obj_array True or False value.
    """
    question = f"Would you like to back up the data folder {input_directory} now?"
    return tkinter.messagebox.askyesno('Make Backups?', question)


def save_yes_no():
    """
    .. function:: save_yes_no()

    :Summary:
        GUI window to prompt the user whether they will be saving the visualizations and charts generated by this
        processing/analysis run.

    :return output_save_to:
        string --> where to save the data. If none is selected, Nonetype is returned
    """
    question = "Would you like to save the plots generated by the analysis?"
    usr_says = tkinter.messagebox.askyesnocancel('Save Plots?', question)

    if usr_says is True:
        return mipgui.file_dialogs.set_save_path()

    elif usr_says is False:
        verify = tkinter.messagebox.askokcancel('You Sure?',
                                                'Are you Sure? The temporary files generated will not be saved!',
                                                icon='warning'
                                                )
        print(f"The output of verify is {verify}")
        if verify is 'ok':
            tkinter.messagebox.showinfo('FYI', 'OK, Moving on, then...')
            mipgui.file_dialogs.root.destroy()
            return None
        else:
            return mipgui.file_dialogs.set_save_path()
    else:
        if tkinter.messagebox.askokcancel('Quit?', 'Would you like to quit the application?'):
            sys.exit()
        else:
            return None


def save_user_analysis_prefs():
    """
    Prompt the user if they would like to save their personal preferences for analysis type.
    :return: boolean
    """
    return True


def retry_backup():
    """
    Prompts the user whether they'd like to retry making file_obj_array backup directory.
    :return bool --> retry:
    """
    retry = tkinter.messagebox.askyesnocancel('Backup Failure',
                                              'The backup failed to make the directory as anticipated.\nRetry?'
                                              )
    return retry
